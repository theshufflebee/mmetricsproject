armax(armax_data$VGK_vol,xreg=armax_data$prop_negative,nb.lags=0,latex=F)
lag_selector(y=armax_data$ASHR_vol, xreg=armax_data$N,
nb.lags=5, type="text")
lag_selector(y=armax_data$ASHR_vol, xreg=armax_data$dummy,
nb.lags=5, type="text")
lag_selector(y=armax_data$ASHR_vol, xreg=armax_data$total_tariff,
nb.lags=5, type="text")
lag_selector(y=armax_data$ASHR_vol, xreg=armax_data$total_trade,
nb.lags=5, type="text")
lag_selector(y=armax_data$ASHR_vol, xreg=armax_data$prop_positive,
nb.lags=5, type="text")
lag_selector(y=armax_data$ASHR_vol, xreg=armax_data$prop_negative,
nb.lags=5, type="text")
armax(armax_data$ASHR_vol,xreg=armax_data$N,nb.lags=5,latex=F)
armax(armax_data$ASHR_vol,xreg=armax_data$dummy,nb.lags=5,latex=F)
armax(armax_data$ASHR_vol,xreg=armax_data$total_tariff,nb.lags=5,latex=F)
armax(armax_data$ASHR_vol,xreg=armax_data$prop_positive,nb.lags=3,latex=F)
armax(armax_data$ASHR_vol,xreg=armax_data$prop_negative,nb.lags=5,latex=F)
source(here("various_proc_TS.R"))
source(here("helperfunctions/various_proc_TS.R"))
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$N,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$dummy,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$total_tariff,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$total_trade,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$prop_positive,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$prop_negative,
nb.lags=5, type="text")
View(negative)
armax(armax_data$SPY_vol,xreg=armax_data$prop_positive,nb.lags=2,latex=F)
spytariff = armax(armax_data$SPY_vol,xreg=armax_data$total_tariff,
nb.lags=5,latex=F)
spytariff
spytariff$coef
spytariff$coef
class(spytariff$coef)
class(spytariff$coef[1:5])
spytariff$coef[1:5]
spytariff$coef[1:4]
spytariff$coef[5:2]
spytariff$coef[5:7]
spytariff$coef[6:9]
spytariff$coef[6:11]
IRF2 <- sim.arma(c=0,phi=spytariff$coef[1:4],theta=spytariff$coef[6:11],sigma=1,
T=nb.periods,y.0=rep(0,length(spytariff$coef[1:4])),
nb.sim=1,make.IRF=1)
nb.periods <- 20
IRF2 <- sim.arma(c=0,phi=spytariff$coef[1:4],theta=spytariff$coef[6:11],sigma=1,
T=nb.periods,y.0=rep(0,length(spytariff$coef[1:4])),
nb.sim=1,make.IRF=1)
lines(IRF2,lwd=2,col="red",lty=2)
abline(h=0,col="grey")
plot(IRF2)
spytariffsimple = lag_selector(y=armax_data$SPY_vol,
xreg=armax_data$total_tariff,
nb.lags=5, type="text")
spytariff = armax(armax_data$SPY_vol,xreg=armax_data$total_tariff,
nb.lags=5,latex=F)
spytariffsimple
spytariff
spytariffsimple = lag_selector(y=armax_data$SPY_vol,
xreg=armax_data$total_tariff,
nb.lags=5, type="text")
spytariffsimple = lag_selector(y=armax_data$SPY_vol,
xreg=armax_data$total_tariff,
nb.lags=5, type="text")
spytariff = armax(armax_data$SPY_vol,xreg=armax_data$total_tariff,
nb.lags=5,latex=F)
spytariff
# This script contains all functions related implementation of ARMA-X
#Necessary libraries
library(forecast)
library(ggplot2)
library(texreg)
#--------------------------------------------------------------------------------
#-----------------                     1                        -----------------
#--------------------------------------------------------------------------------
# This function creates lags from a variable
#--------------------------------------------------------------------------------
lag_creator <- function(xreg, nb.lags = 3, varname = "xreg") {
xreg_lags <- embed(xreg, nb.lags + 1)
colnames(xreg_lags) <- paste0(varname, "_lag_", 0:nb.lags)
return(xreg_lags)
}
#--------------------------------------------------------------------------------
#-----------------                     2                        -----------------
#--------------------------------------------------------------------------------
# This function uses the JP-Renne way of selecting the number of lags
#--------------------------------------------------------------------------------
lag_selector <- function(y, xreg, nb.lags = 3, type = "text") {
#name of the xreg variable
xreg_name <- deparse(substitute(xreg))
#first create lags
xreg_lags <- lag_creator(xreg, nb.lags, varname = xreg_name)
#align y to match lagged xreg
y_aligned <- tail(y, nrow(xreg_lags))
#fit an ARMA(0,0,0) model with lm (with r set above)
eq <- lm(y_aligned ~ xreg_lags)
#compute Newey-West HAC standard errors
var.cov.mat <- NeweyWest(eq, lag = nb.lags + 4, prewhite = FALSE)
robust_se <- sqrt(diag(var.cov.mat))
#output table; significant lags are how many we choose
stargazer(eq, eq, type = type, header=FALSE,
column.labels = c("(no HAC)", "(HAC)"), keep.stat = "n",
se = list(NULL, robust_se), no.space = TRUE)
return(invisible(eq))
}
#e.g. lag_selector(y=armax_data$r_vol_h,xreg=armax_data$dummy,nb.lags=12)
#--------------------------------------------------------------------------------
#-----------------                     3                        -----------------
#--------------------------------------------------------------------------------
# This function uses Information Criterions
# to select number of lags (using loops)
#--------------------------------------------------------------------------------
lag_selector_ic <- function(y, x, max_p = 3, max_q = 3,
max_r = 5, criterion = "AIC") {
#creating lags according to r
create_lags <- function(x, r) {
if (is.null(dim(x))) {
x <- matrix(x, ncol = 1)
}
#applying to each column of Xreg (for each exo variable)
lagged_list <- lapply(1:ncol(x), function(j) {
col <- x[, j]
if (r == 0) return(matrix(col, ncol = 1, dimnames = list(NULL, paste0("X", j, "_Lag_0"))))
embedded <- embed(col, r + 1)
colnames(embedded) <- paste0("X", j, "_Lag_", 0:r)
return(embedded)
})
#ensure all matrices have the same number of rows
min_rows <- min(sapply(lagged_list, nrow))
lagged_list <- lapply(lagged_list, function(mat) tail(mat, min_rows))
do.call(cbind, lagged_list)
}
#prepare results
best_model <- NULL
best_score <- Inf #since minimizing
best_params <- list(p = NA, q = NA, r = NA)
scores_by_r <- data.frame(r = integer(), score = numeric())
#first loop for each lag
for (r in 0:max_r){
x_lags <- create_lags(x, r)
y_trimmed <- tail(y, nrow(x_lags))
best_r_score <- Inf
#second loop for each AR(p)
for (p in 0:max_p){
#third loop for each MA(q)
for (q in 0:max_q){
model <- tryCatch({
Arima(y_trimmed, order = c(p, 0, q), xreg = x_lags)
}, error = function(e) NULL)
#option for AIC or BIC
if (!is.null(model)){
score <- if (criterion == "BIC") BIC(model) else AIC(model)
#chooses the best score (lowest value of AIC/BIC)
if (score < best_score){
best_score <- score
best_model <- model
best_params <- list(p = p, q = q, r = r)}
if (score < best_r_score){
best_r_score <- score}}}}
scores_by_r <- rbind(scores_by_r, data.frame(r = r, score = best_r_score))
}
#plot AIC/BIC vs r
ICplot =  ggplot(scores_by_r, aes(x = r, y = score)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "red", size = 2) +
labs(title = paste(criterion, "vs Number of Exogenous Lags (r)"),
x = "r (Number of Lags on Exogenous Variable)", y = criterion) +
theme_minimal()
#results
list(
model = best_model,
params = best_params,
score = best_score,
criterion = criterion,
scores_by_r = scores_by_r,
ICplot = ICplot)
}
#e.g. result <- select_armax(armax_vol$r_vol, armax_vol$N,
#                       max_p = 3, max_q = 3, max_r = 5, criterion = "AIC")
#summary(result$model)
#--------------------------------------------------------------------------------
#-----------------                     4                        -----------------
#--------------------------------------------------------------------------------
# This function implements an ARMAX model
#--------------------------------------------------------------------------------
armax <- function(y, xreg, nb.lags = 3, max.p = 5,
max.q = 5, max.d = 0, latex=FALSE){
#name of the xreg variable
xreg_name <- sub(".*\\$", "", deparse(substitute(xreg)))
#first create lags
xreg_lags <- lag_creator(xreg, nb.lags, varname = xreg_name)
#align y to match lagged xreg
y_aligned <- tail(y, nrow(xreg_lags))
#find best armax model and fit
tab = auto.arima(y_aligned, xreg = xreg_lags, seasonal = FALSE,
max.p = max.p, max.q = max.q, max.d = max.d,
stepwise = FALSE, approximation = FALSE, trace = FALSE)
#print the result
if (latex == FALSE) {
print(screenreg(tab, digits = 4))} else {
print(texreg(tab, caption = "ARMAX Model Results",
label = "tab:armax", digits = 4))}
return(invisible(tab))
}
spytariffsimple = lag_selector(y=armax_data$SPY_vol,
xreg=armax_data$total_tariff,
nb.lags=5, type="text")
spytariff = armax(armax_data$SPY_vol,xreg=armax_data$total_tariff,
nb.lags=5,latex=F)
spytariffsimple$coefficients
spytariffsimple$coefficients[2:6]
spytariffsimple$coefficients[2:7]
nb.periods <- 20
nb.lags=5
IRF1 <- sim.arma(c=0,phi=c(0),theta=spytariffsimple$coefficients[2:(nb.lags+2)]
,sigma=1, T=nb.periods,y.0=c(0),nb.sim=1,make.IRF=1)
IRF2 <- sim.arma(c=0,phi=spytariff$coef[1:4],theta=spytariff$coef[6:11],sigma=1,
T=nb.periods,y.0=rep(0,length(spytariff$coef[1:4])),
nb.sim=1,make.IRF=1)
plot(IRF1)
nb.periods <- 10
nb.lags=5
IRF1 <- sim.arma(c=0,phi=c(0),theta=spytariffsimple$coefficients[2:(nb.lags+2)]
,sigma=1, T=nb.periods,y.0=c(0),nb.sim=1,make.IRF=1)
IRF2 <- sim.arma(c=0,phi=spytariff$coef[1:4],theta=spytariff$coef[6:11],sigma=1,
T=nb.periods,y.0=rep(0,length(spytariff$coef[1:4])),
nb.sim=1,make.IRF=1)
plot(IRF1)
plot(IRF2)
plot(IRF1)
plot(IRF1)
plot(IRF2)
spytariffsimple = lag_selector(y=armax_data$SPY_vol,
xreg=armax_data$total_tariff,
nb.lags=5, type="text")
spytariff = armax(armax_data$SPY_vol,xreg=armax_data$total_tariff,
nb.lags=5,latex=F)
spytariff
spytariffsimple = lag_selector(y=armax_data$SPY_vol,
xreg=armax_data$total_tariff,
nb.lags=5, type="text")
spytariff = armax(armax_data$SPY_vol,xreg=armax_data$total_tariff,
nb.lags=5,latex=F)
spytariff
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$N,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$dummy,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$total_tariff,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$total_trade,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$prop_positive,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$prop_negative,
nb.lags=5, type="text")
rm(list=ls())
require(tinytex) #LaTeX
require(ggplot2) #plots
require(AEC) #JP-Renne functions
require(AER) #NW formula
require(forecast) #time series stuff
require(expm) #matrix exponents
require(here) #directory finder
require(stringr) # analysis of strings, important for the detection in tweets
require(dplyr) #data management
require(lubridate) #data dates management
require(zoo) #for lagging
require(jtools) #tables
require(huxtable) #tables
require(lmtest) #reg tests
require(vroom) #for loading data
require(data.table) #for data filtering
require(sysid) #for ARMA-X modeling
require(sandwhich) #regression errors
require(stargazer) #nice reg tables
require(tidytext) #text mining
require(textstem) #lemmatization
require(quanteda) #tokenization
require(texreg) #arima tables
getwd()
#setwd("...") -> set wd at base repo folder
#load helper functions
source(here("helperfunctions/data_loaders.R"))
source(here("helperfunctions/date_selector.R"))
source(here("helperfunctions/plotters.R"))
source(here("helperfunctions/quick_arma.R"))
source(here("helperfunctions/r.vol_calculators.R"))
source(here("helperfunctions/truths_cleaning_function.R"))
source(here("helperfunctions/armax_functions.R"))
# 1. Load Political Social Media
#contains posts from Twitter & TruthSocial
social <- read.csv(here("data/mothership", "social.csv"))
social_hourly <- read.csv(here("data/mothership", "socialhourly.csv"))
# 2. Load Financial
#S&P500
SPY <- read.csv(here("data/mothership", "SPY.csv"))
#STOXX50
VGK <- read.csv(here("data/mothership", "VGK.csv"))
#CSI 300 (China)
ASHR <- read.csv(here("data/mothership", "ASHR.CSV"))
#make posixct
SPY$timestamp = as.POSIXct(SPY$timestamp,format = "%Y-%m-%d %H:%M:%S")
VGK$timestamp = as.POSIXct(VGK$timestamp,format = "%Y-%m-%d %H:%M:%S")
ASHR$timestamp = as.POSIXct(ASHR$timestamp,format = "%Y-%m-%d %H:%M:%S")
social$timestamp = as.POSIXct(social$timestamp,format = "%Y-%m-%d %H:%M:%S")
social_hourly$timestamp = as.POSIXct(social_hourly$timestamp,format = "%Y-%m-%d %H:%M:%S")
#find hourly volatility
#NOTE: this ignores tweets made outside trading hours!!
SPY_volatility_alltime = dplyr::select(SPY,timestamp,r_vol_h)
#aggregating per hour
SPY_volatility_alltime = SPY_volatility_alltime %>%
mutate(timestamp = floor_date(timestamp, unit = "hour")) %>%
distinct(timestamp, .keep_all = TRUE)
#select time period
SPY_volatility = filter(SPY_volatility_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#temp: check seasonality etc
hvol_plotter = function(data,breaks,title){
x_scale <- switch(breaks,
"yearly" = scale_x_datetime(date_labels = "%b %Y", date_breaks = "6 month"),
"monthly" = scale_x_datetime(date_labels = "%b %Y", date_breaks = "1 month"),
"daily"   = scale_x_datetime(date_labels = "%a %d", date_breaks = "1 day"),
"hourly"  = scale_x_datetime(date_labels = "%Hh", date_breaks = "1 hour"),
NULL)  #default NULL if nothing matches
ggplot(data, aes(x = timestamp, y = r_vol_h)) +
geom_line(color = "#2c7fb8", linewidth = 0.1) +
geom_point(color = "#253494", size = 0) +
x_scale +
scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
ylim(0,0.1) +
labs(title = title,
x = NULL,
y = "hourly realised volatility") +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", hjust = 0.5))}
hvol_plotter(SPY_volatility,breaks="1 month",
title="Realised Volatility - SPY")
#find hourly volatility
#NOTE: this ignores tweets made outside trading hours!!
VGK_volatility_alltime = dplyr::select(VGK,timestamp,r_vol_h)
#aggregating per hour
VGK_volatility_alltime = VGK_volatility_alltime %>%
mutate(timestamp = floor_date(timestamp, unit = "hour")) %>%
distinct(timestamp, .keep_all = TRUE)
#select time period
VGK_volatility = filter(VGK_volatility_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#find count
tweetcount_alltime = dplyr::select(social_hourly,timestamp,N)
#select time period
tweetcount = filter(tweetcount_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#plot
ggplot(tweetcount_alltime, aes(x = timestamp, y = N)) +
geom_point(color = "#253494", size = 1) +
scale_x_datetime(date_labels = "%b %Y", date_breaks = "9 month") +
labs(title = "Trump Social Media Count",
x = NULL,
y = "number of tweets/truths") +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", hjust = 0.5))
#find dummy
tweetdummy_alltime = dplyr::select(social_hourly,timestamp,dummy)
#select time period
tweetdummy = filter(tweetdummy_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#find count
tariff_alltime = dplyr::select(social_hourly,timestamp,total_tariff)
#select time period
tariff = filter(tariff_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#find count
trade_alltime = dplyr::select(social_hourly,timestamp,total_trade)
#select time period
trade = filter(trade_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#find count
positive_alltime = dplyr::select(social_hourly,timestamp,prop_positive)
#select time period
positive = filter(positive_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#find count
negative_alltime = dplyr::select(social_hourly,timestamp,prop_negative)
#select time period
negative = filter(negative_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#find hourly volatility
#NOTE: this ignores tweets made outside trading hours!!
ASHR_volatility_alltime = dplyr::select(ASHR,timestamp,r_vol_h)
#aggregating per hour
ASHR_volatility_alltime = ASHR_volatility_alltime %>%
mutate(timestamp = floor_date(timestamp, unit = "hour")) %>%
distinct(timestamp, .keep_all = TRUE)
#select time period
ASHR_volatility = filter(ASHR_volatility_alltime,
between(timestamp,
as.Date('2014-01-01'),
as.Date('2025-04-10')))
#merge our dependant and independant vars
armax_data = left_join(SPY_volatility, VGK_volatility, by="timestamp")
armax_data = left_join(armax_data, ASHR_volatility, by="timestamp")
armax_data = left_join(armax_data, tweetdummy, by="timestamp")
armax_data = left_join(armax_data, tweetcount, by="timestamp")
armax_data = left_join(armax_data, tariff, by="timestamp")
armax_data = left_join(armax_data, trade, by="timestamp")
armax_data = left_join(armax_data, positive, by="timestamp")
armax_data = left_join(armax_data, negative, by="timestamp")
#rename volatility columns
names(armax_data)[2] <- "SPY_vol"
names(armax_data)[3] <- "VGK_vol"
names(armax_data)[4] <- "ASHR_vol"
#convert NA to zeroes
armax_data$N[is.na(armax_data$N)] = 0
armax_data$dummy[is.na(armax_data$dummy)] = 0
armax_data$total_tariff[is.na(armax_data$total_tariff)] = 0
armax_data$total_trade[is.na(armax_data$total_trade)] = 0
armax_data$prop_positive[is.na(armax_data$prop_positive)] = 0
armax_data$prop_negative[is.na(armax_data$prop_negative)] = 0
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$N,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$dummy,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$total_tariff,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$total_trade,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$prop_positive,
nb.lags=5, type="text")
lag_selector(y=armax_data$SPY_vol, xreg=armax_data$prop_negative,
nb.lags=5, type="text")
spytariffsimple = lag_selector(y=armax_data$SPY_vol,
xreg=armax_data$total_tariff,
nb.lags=5, type="text")
spytariff = armax(armax_data$SPY_vol,xreg=armax_data$total_tariff,
nb.lags=5,latex=F)
spytariff
nb.periods <- 10
nb.lags=5
IRF1 <- sim.arma(c=0,phi=c(0),theta=spytariffsimple$coefficients[2:(nb.lags+2)]
,sigma=1, T=nb.periods,y.0=c(0),nb.sim=1,make.IRF=1)
IRF2 <- sim.arma(c=0,phi=spytariff$coef[1:4],theta=spytariff$coef[6:11],sigma=1,
T=nb.periods,y.0=rep(0,length(spytariff$coef[1:4])),
nb.sim=1,make.IRF=1)
par(plt=c(.15,.95,.2,.95))
plot(IRF1,type="l",lwd=2,col="red",xlab="months after shock",
ylab="Chge in price (percent)")
lines(IRF2,lwd=2,col="red",lty=2)
abline(h=0,col="grey")
plot(IRF1)
plot(IRF2)
nb.periods <- 10
nb.lags=5
IRF1 <- sim.arma(c=0,phi=c(0),theta=spytariffsimple$coefficients[2:(nb.lags+2)]
,sigma=1, T=nb.periods,y.0=c(0),nb.sim=1,make.IRF=1)
IRF2 <- sim.arma(c=0,phi=spytariff$coef[1:4],theta=spytariff$coef[6:11],sigma=1,
T=nb.periods,y.0=rep(0,length(spytariff$coef[1:4])),
nb.sim=1,make.IRF=1)
plot(IRF1)
plot(IRF2)
spytariffsimple = lag_selector(y=armax_data$SPY_vol,
xreg=armax_data$total_tariff,
nb.lags=5, type="text")
spytariff = armax(armax_data$SPY_vol,xreg=armax_data$total_tariff,
nb.lags=5,latex=F)
spytariff
nb.periods <- 10
nb.lags=5
IRF1 <- sim.arma(c=0,phi=c(0),theta=spytariffsimple$coefficients[2:(nb.lags+2)]
,sigma=1, T=nb.periods,y.0=c(0),nb.sim=1,make.IRF=1)
IRF2 <- sim.arma(c=0,phi=spytariff$coef[1:4],theta=spytariff$coef[6:11],sigma=1,
T=nb.periods,y.0=rep(0,length(spytariff$coef[1:4])),
nb.sim=1,make.IRF=1)
plot(IRF1)
plot(IRF2)
spytariff$coef[1:4]
spytariff$coef[1:5]
spytariff$coef[1:6]
spytariff$coef[7:9]
spytariff$coef[7:12]
nb.periods <- 10
nb.lags=5
IRF1 <- sim.arma(c=0,phi=c(0),theta=spytariffsimple$coefficients[2:(nb.lags+2)]
,sigma=1, T=nb.periods,y.0=c(0),nb.sim=1,make.IRF=1)
IRF2 <- sim.arma(c=0,phi=spytariff$coef[1:5],theta=spytariff$coef[7:12],sigma=1,
T=nb.periods,y.0=rep(0,length(spytariff$coef[1:5])),
nb.sim=1,make.IRF=1)
plot(IRF2)
